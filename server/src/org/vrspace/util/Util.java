package org.vrspace.util;
import java.net.*;
import java.util.*;
import java.io.*;

/**
Miscelanous usefull methods
*/
public class Util {
  private static Stack stack = new Stack();
  /** push obj to static Stack */
  public static void push( Object obj ) {
    stack.push( obj );
  }
  /** pop from static Stack */
  public static Object pop() {
    return stack.pop();
  }
  /**
  Returns the location of the class file
  */
  public static URL getLocation( Object obj ) {
    return obj.getClass().getProtectionDomain().getCodeSource().getLocation();
  }
  /**
  Returns directory part of a file name, trailing slash/backlash included
  */
  public static String getDir( String path ) {
    int index=path.indexOf(':');
    if ( index >= 0 ) {
      path = path.substring( index+1 );
    }
    if( path.charAt( path.length()-1 ) == '/' || path.charAt( path.length()-1 ) == '\\' ) {
      return path;
    }
    index = path.lastIndexOf('/');
    if ( index < 0 ) {
      index = path.lastIndexOf('\\');
    }
    return path.substring( 0, index+1 );
  }
  /**
  Loads properties from <b>file</b> into <b>props</b>
  */
  public static Properties loadProperties ( Properties props, String file ) throws FileNotFoundException, IOException {
    props.load( new URL( file ).openStream() );
    return props;
  }
  /**
  Stores the properties from <b>props</b> to <b>file</b>
  */
  public static void storeProperties ( Properties props, String file ) throws FileNotFoundException, IOException {
    props.store( new FileOutputStream( file ), "Autogenerated ");
  }
  /**
  Sets the property <b>name</b> to <b>defaultValue</b> if not null,
  or to the system property if exists,
  <b>only if</b> it does not already exist in <b>props</b>
  */
  public static void setDefaultProperty( Properties props, String name, String defaultValue ) {
    if ( props.getProperty( name ) == null && System.getProperty( name ) == null && defaultValue != null ) {
      props.setProperty( name, defaultValue );
    } else if (System.getProperty( name ) != null) {
      props.setProperty( name, System.getProperty( name ));
    }
  }
  /**
  Creates FileOutputStream in <b>destPath</b>, with directiories as needed
  */
  public static FileOutputStream createFileOutputStream( String destPath )
                   throws IOException
  {
    File outFile=new File( destPath );
    try {
      outFile.createNewFile();
    } catch ( IOException ioe ) {
      File outDir=new File(outFile.getAbsolutePath().substring(0, outFile.getAbsolutePath().length()-outFile.getName().length()));
      outDir.mkdirs();
      //outFile = new File(outDir.getAbsolutePath()+file.separator+file.getName());
      outFile = new File(destPath);
      outFile.createNewFile();
    }
    // read&write
    return new FileOutputStream( outFile );
  }
  /**
  I hate catching InterruptedException!
  */
  public static void sleep( long millis ) {
    try {
      Thread.sleep( millis );
    } catch ( InterruptedException e ) {
      Logger.logDebug( "Something interrupted me?" );
      Logger.logError(e);
    }
  }
  /**
  Changes ":" to "\" in path, then all instances of "\" to "/".
  */
  public static String checkPath( String path ) {
    int pos;
    if ( (pos = path.indexOf(':')) >= 0 ) {
      path = (new StringBuffer( path ).replace( pos, pos + 1, "\\" )).toString();
    }

    path = path.replace( '\\', '/' );

    return path;
  }
  /**
   * true if the file has the extension .wrl (not e.g. .wrl.gz)
   */
  public static boolean hasVrmlExtension( String path ) {
    String fileName = new File( path ).getName();
    int pos = fileName.lastIndexOf(".");

    if ( ( pos >= 0 ) &&
         ( fileName.substring( pos + 1, fileName.length() ).toLowerCase().equals( "wrl" ) ) )
      return true;
    else
      return false;
  }
  /**
  Returns package name for a class
  */
  public static String getPackageName( Class cls ) {
    String ret = null;
    Package pkg = cls.getPackage();
    if ( pkg == null ) {
      String tmp = cls.getName();
      int pos = tmp.lastIndexOf(".");
      if ( pos == -1 ) pos = tmp.lastIndexOf("/");
      if ( pos >= 0 ) ret = tmp.substring( 0, pos - 1 );
    } else {
      ret = pkg.getName();
    }
    return ret;
  }
  /**
  */
  public static String getPackageName( Object obj ) {
    return getPackageName( obj.getClass() );
  }
  /**
  */
  public static String getClassName( Class cls ) {
    String ret = null;
    String tmp = cls.getName();
    int pos = tmp.lastIndexOf(".");
    if ( pos == -1 ) pos = tmp.lastIndexOf("/");
    if ( pos >= 0 ) ret = tmp.substring( pos+1 );
    return ret;
  }
  public static String getClassName( Object obj ) {
    return getClassName( obj.getClass() );
  }

  public static class StringInputStream extends InputStream {
    StringReader in;
    public StringInputStream( String in ) {
      this.in =  new StringReader( in );
    }
    public int read() throws IOException {
      return in.read();
    }
  }

}
